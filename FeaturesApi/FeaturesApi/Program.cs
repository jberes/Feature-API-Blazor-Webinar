using FeaturesApi.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// this is the dbContext that was generated by the dotnet-ef tool
// in FeaturesConext.cs
builder.Services.AddDbContext<FeaturesContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("LocalConnection")));

// Add Cors to enable using this service on your dev machine w/ a client app
// or from App Builder
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll",
      builder => builder.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod()
    );
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseCors("AllowAll");
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.MapGet("/", () => "Hello World");

app.MapGet("/features", async (FeaturesContext context) =>
    await context.VwFeatureProducts.ToListAsync());

app.MapGet("/features/{id}", async (FeaturesContext context, int id) =>
{
    var feature = await context.VwFeatureProducts
        .Where(f => f.FeatureId == id).ToListAsync();
    return feature;
});

app.MapPost("/features", async (FeaturesContext context,
        [FromBody] Feature feature) =>
{
    // You can use this to just save the entire object in the Post
    //feature.FeatureId = 0;
    //context.Features.Add(feature);
    //await context.SaveChangesAsync();

    //// Or you can set each field independently 
    var newFeature = new Feature()
    {
        Title = feature.Title,
        Description = feature.Description,
        RequestorEmail = feature.RequestorEmail,
        ProductId = feature.ProductId
    };
    await context.Features.AddAsync(newFeature);
    await context.SaveChangesAsync();
    return Results.Ok(newFeature);
});

app.MapPut("/features/", async (FeaturesContext context,
        [FromBody] Feature feature) =>
{
    // Find the feature to update otherwise send an error back
    var dbFeatureRequest = await context.Features.FindAsync(feature.FeatureId);
    if (dbFeatureRequest == null)
        return Results.NotFound("Feature Request #" + feature.FeatureId + " Not Found");

    dbFeatureRequest.ProductId = feature.ProductId;
    dbFeatureRequest.Title = feature.Title;
    dbFeatureRequest.Description = feature.Description;
    dbFeatureRequest.RequestorEmail = feature.RequestorEmail;
    // Save to the Database
    await context.SaveChangesAsync();
    return Results.Ok(dbFeatureRequest);
});


app.MapDelete("features/{id}", async (FeaturesContext context, int id) =>
{
    var dbRequest = await context.Features.FindAsync(id);
    if (dbRequest == null)
        return Results.NotFound("Feature #" + id + " Not Found");

    context.Features.Remove(dbRequest);
    await context.SaveChangesAsync();
    return Results.Ok(dbRequest);
});

app.Run();